#!/usr/bin/env ruby

require_relative '../lib/booku'

#Executable files are any files that contain instructions in a form that a computer's 
#operating system or application can understand and follow. Any executable files we 
#place in our bin directory need to begin with the following line:

#!/usr/bin/env ruby

#This is often referred to as a "shebang line" and it tells the shell which interpreter 
#to use to execute the remainder of the file.

#Using the above setup, you can run your program by typing ruby bin/< your file name > 
#into the command line.

#Alternatively, you can execute your program by simply typing ./bin/< your file name > 
#into the command line, since the shebang line at the top of your executable file is 
#already telling the shell to use Ruby to interpret the rest of the file.

#Generally our executable file is responsible for running our program. That might include
#loading required libraries and starting off an execution flow, like telling Ruby to start
#a game of Tic Tac Toe.


#File Permissions and chmod
#For security purposes, a shell environment, including BASH, running within your terminal, 
#requires that executable files are given explicit permission to execute.

#When we execute code through the ruby interpreter with the ruby command, your shell or 
#terminal has already given the ruby command permission to execute code.

#But in order for your shell to execute a file via a command like ./bin/<file name>, 
#you have to grant it execute permissions. We do this using the chmod command. You can 
#grant a file execute permissions with:

#$ chmod +x <file_name>
#So to grant a file bin/tictactoe permissions to execute, you would run: chmod +x bin/tictactoe. 
#Depending on your shell environment and user, you might need to run chmod with sudo 
#(sudo chmod +x bin/tictactoe).

#All the files provided by Learn already have the correct permissions and this should 
#never cause you a problem. But in the event you need to ever create your own executable, 
#we thought we'd tell you.

#The CLI Interface
#CLI Applications generally follow a similar interface or user experience pattern. 
#Imagine a CLI version of Tic Tac Toe. From a player's perspective, they would start the 
#game by executing the bin for the game.

#$ bin/tictactoe

